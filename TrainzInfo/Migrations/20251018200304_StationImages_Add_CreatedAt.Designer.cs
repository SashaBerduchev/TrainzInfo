// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainzInfo.Data;

#nullable disable

namespace TrainzInfo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20251018200304_StationImages_Add_CreatedAt")]
    partial class StationImages_Add_CreatedAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TrainzInfo.Models.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("IsStationExist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oblast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Oblastsid")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Oblastsid");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TrainzInfo.Models.DepotList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Cityid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UkrainsRailwayid")
                        .HasColumnType("int");

                    b.Property<string>("UkrainsRailways")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Cityid");

                    b.HasIndex("UkrainsRailwayid");

                    b.ToTable("Depots");
                });

            modelBuilder.Entity("TrainzInfo.Models.DieselTrains", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepotListid")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberTrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuburbanTrainsInfoid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepotListid");

                    b.HasIndex("SuburbanTrainsInfoid");

                    b.ToTable("DieselTrains");
                });

            modelBuilder.Entity("TrainzInfo.Models.ElectricTrain", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Cityid")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedTrain")
                        .HasColumnType("date");

                    b.Property<string>("DepotCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepotListid")
                        .HasColumnType("int");

                    b.Property<string>("DepotTrain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElectrickTrainzInformationid")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsProof")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("LastKvr")
                        .HasColumnType("date");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantKvr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantsCreateid")
                        .HasColumnType("int");

                    b.Property<int?>("PlantsKvrid")
                        .HasColumnType("int");

                    b.Property<int?>("Trainsid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Cityid");

                    b.HasIndex("DepotListid");

                    b.HasIndex("ElectrickTrainzInformationid");

                    b.HasIndex("PlantsCreateid");

                    b.HasIndex("PlantsKvrid");

                    b.HasIndex("Trainsid");

                    b.ToTable("Electrics");
                });

            modelBuilder.Entity("TrainzInfo.Models.ElectrickTrainzInformation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("AllInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imgsrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ElectrickTrainzInformation");
                });

            modelBuilder.Entity("TrainzInfo.Models.IpAdresses", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddres")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("IpAdresses");
                });

            modelBuilder.Entity("TrainzInfo.Models.Locomotive", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Depot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepotListid")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocomotiveBaseInfoid")
                        .HasColumnType("int");

                    b.Property<int?>("Locomotive_Seriesid")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("DepotListid");

                    b.HasIndex("LocomotiveBaseInfoid");

                    b.HasIndex("Locomotive_Seriesid");

                    b.ToTable("Locomotives");
                });

            modelBuilder.Entity("TrainzInfo.Models.LocomotiveBaseInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("BaseInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("LocomotiveBaseInfos");
                });

            modelBuilder.Entity("TrainzInfo.Models.Locomotive_series", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Seria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Locomotive_Series");
                });

            modelBuilder.Entity("TrainzInfo.Models.MainImages", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("MainImages");
                });

            modelBuilder.Entity("TrainzInfo.Models.Metro", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Metros");
                });

            modelBuilder.Entity("TrainzInfo.Models.MetroLines", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("CountStation")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Metroid")
                        .HasColumnType("int");

                    b.Property<string>("NameLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Metroid");

                    b.ToTable("MetroLines");
                });

            modelBuilder.Entity("TrainzInfo.Models.MetroStation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetroID")
                        .HasColumnType("int");

                    b.Property<string>("MetroLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetroLineId")
                        .HasColumnType("int");

                    b.Property<int?>("MetroLinesid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MetroLinesid");

                    b.ToTable("MetroStations");
                });

            modelBuilder.Entity("TrainzInfo.Models.NewsComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NewsInfoid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewsInfoid");

                    b.ToTable("NewsComments");
                });

            modelBuilder.Entity("TrainzInfo.Models.NewsInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("BaseNewsInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateTime")
                        .HasColumnType("date");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imgsrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNews")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("NewsImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NewsInfoAll")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("NewsInfos");
                });

            modelBuilder.Entity("TrainzInfo.Models.Oblast", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OblCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Oblasts");
                });

            modelBuilder.Entity("TrainzInfo.Models.Plants", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("TrainzInfo.Models.RailwayUsersPhoto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsProof")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stationsid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Stationsid");

                    b.ToTable("RailwayUsersPhotos");
                });

            modelBuilder.Entity("TrainzInfo.Models.StationImages", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("StationImages");
                });

            modelBuilder.Entity("TrainzInfo.Models.StationInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("AllInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("StationInfos");
                });

            modelBuilder.Entity("TrainzInfo.Models.Stations", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Citysid")
                        .HasColumnType("int");

                    b.Property<string>("DopImgSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DopImgSrcSec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DopImgSrcThd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imgsrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Metroid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oblast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Oblastsid")
                        .HasColumnType("int");

                    b.Property<string>("Railway")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StationImagesid")
                        .HasColumnType("int");

                    b.Property<int?>("StationInfoid")
                        .HasColumnType("int");

                    b.Property<int?>("UkrainsRailwaysid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Citysid");

                    b.HasIndex("Metroid");

                    b.HasIndex("Oblastsid");

                    b.HasIndex("StationImagesid");

                    b.HasIndex("StationInfoid");

                    b.HasIndex("UkrainsRailwaysid");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("TrainzInfo.Models.StationsShadule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsUsing")
                        .HasColumnType("bit");

                    b.Property<int>("NumberTrain")
                        .HasColumnType("int");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stationsid")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeOfArrive")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeOfDepet")
                        .HasColumnType("time");

                    b.Property<int?>("Trainid")
                        .HasColumnType("int");

                    b.Property<int?>("UkrainsRailwaysid")
                        .HasColumnType("int");

                    b.Property<string>("UzFilia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Stationsid");

                    b.HasIndex("Trainid");

                    b.HasIndex("UkrainsRailwaysid");

                    b.ToTable("StationsShadules");
                });

            modelBuilder.Entity("TrainzInfo.Models.SuburbanTrainsInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("AllInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("SuburbanTrainsInfos");
                });

            modelBuilder.Entity("TrainzInfo.Models.Train", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Fromid")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsing")
                        .HasColumnType("bit");

                    b.Property<string>("NameOfTrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("StationFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Toid")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeOfPassTrainid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Fromid");

                    b.HasIndex("Toid");

                    b.HasIndex("TypeOfPassTrainid");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("TrainzInfo.Models.TrainsShadule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<TimeSpan>("Arrival")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Departure")
                        .HasColumnType("time");

                    b.Property<string>("Distance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsing")
                        .HasColumnType("bit");

                    b.Property<string>("NameStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberTrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stationsid")
                        .HasColumnType("int");

                    b.Property<int?>("Trainid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Stationsid");

                    b.HasIndex("Trainid");

                    b.ToTable("TrainsShadule");
                });

            modelBuilder.Entity("TrainzInfo.Models.TypeOfPassTrain", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TypeOfPassTrains");
                });

            modelBuilder.Entity("TrainzInfo.Models.UkrainsRailways", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UkrainsRailways");
                });

            modelBuilder.Entity("TrainzInfo.Models.UserLocomotivePhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeTypeOfData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Locomotiveid")
                        .HasColumnType("int");

                    b.Property<string>("NameLocomotive")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Locomotiveid");

                    b.ToTable("UserLocomotivePhotos");
                });

            modelBuilder.Entity("TrainzInfo.Models.UserTrainzPhoto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("BaseInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stationsid")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Stationsid");

                    b.ToTable("UserTrainzPhotos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainzInfo.Models.City", b =>
                {
                    b.HasOne("TrainzInfo.Models.Oblast", "Oblasts")
                        .WithMany("Cities")
                        .HasForeignKey("Oblastsid");

                    b.Navigation("Oblasts");
                });

            modelBuilder.Entity("TrainzInfo.Models.DepotList", b =>
                {
                    b.HasOne("TrainzInfo.Models.City", "City")
                        .WithMany("DepotLists")
                        .HasForeignKey("Cityid");

                    b.HasOne("TrainzInfo.Models.UkrainsRailways", "UkrainsRailway")
                        .WithMany("DepotLists")
                        .HasForeignKey("UkrainsRailwayid");

                    b.Navigation("City");

                    b.Navigation("UkrainsRailway");
                });

            modelBuilder.Entity("TrainzInfo.Models.DieselTrains", b =>
                {
                    b.HasOne("TrainzInfo.Models.DepotList", "DepotList")
                        .WithMany("DieselTrains")
                        .HasForeignKey("DepotListid");

                    b.HasOne("TrainzInfo.Models.SuburbanTrainsInfo", "SuburbanTrainsInfo")
                        .WithMany("DieselTrains")
                        .HasForeignKey("SuburbanTrainsInfoid");

                    b.Navigation("DepotList");

                    b.Navigation("SuburbanTrainsInfo");
                });

            modelBuilder.Entity("TrainzInfo.Models.ElectricTrain", b =>
                {
                    b.HasOne("TrainzInfo.Models.City", "City")
                        .WithMany("ElectricTrains")
                        .HasForeignKey("Cityid");

                    b.HasOne("TrainzInfo.Models.DepotList", "DepotList")
                        .WithMany("ElectricTrains")
                        .HasForeignKey("DepotListid");

                    b.HasOne("TrainzInfo.Models.ElectrickTrainzInformation", "ElectrickTrainzInformation")
                        .WithMany()
                        .HasForeignKey("ElectrickTrainzInformationid");

                    b.HasOne("TrainzInfo.Models.Plants", "PlantsCreate")
                        .WithMany()
                        .HasForeignKey("PlantsCreateid");

                    b.HasOne("TrainzInfo.Models.Plants", "PlantsKvr")
                        .WithMany()
                        .HasForeignKey("PlantsKvrid");

                    b.HasOne("TrainzInfo.Models.SuburbanTrainsInfo", "Trains")
                        .WithMany("ElectricTrain")
                        .HasForeignKey("Trainsid");

                    b.Navigation("City");

                    b.Navigation("DepotList");

                    b.Navigation("ElectrickTrainzInformation");

                    b.Navigation("PlantsCreate");

                    b.Navigation("PlantsKvr");

                    b.Navigation("Trains");
                });

            modelBuilder.Entity("TrainzInfo.Models.Locomotive", b =>
                {
                    b.HasOne("TrainzInfo.Models.DepotList", "DepotList")
                        .WithMany("Locomotives")
                        .HasForeignKey("DepotListid");

                    b.HasOne("TrainzInfo.Models.LocomotiveBaseInfo", "LocomotiveBaseInfo")
                        .WithMany()
                        .HasForeignKey("LocomotiveBaseInfoid");

                    b.HasOne("TrainzInfo.Models.Locomotive_series", "Locomotive_Series")
                        .WithMany("Locomotives")
                        .HasForeignKey("Locomotive_Seriesid");

                    b.Navigation("DepotList");

                    b.Navigation("LocomotiveBaseInfo");

                    b.Navigation("Locomotive_Series");
                });

            modelBuilder.Entity("TrainzInfo.Models.MetroLines", b =>
                {
                    b.HasOne("TrainzInfo.Models.Metro", "Metro")
                        .WithMany("MetroLines")
                        .HasForeignKey("Metroid");

                    b.Navigation("Metro");
                });

            modelBuilder.Entity("TrainzInfo.Models.MetroStation", b =>
                {
                    b.HasOne("TrainzInfo.Models.MetroLines", "MetroLines")
                        .WithMany("Stations")
                        .HasForeignKey("MetroLinesid");

                    b.Navigation("MetroLines");
                });

            modelBuilder.Entity("TrainzInfo.Models.NewsComments", b =>
                {
                    b.HasOne("TrainzInfo.Models.NewsInfo", "NewsInfo")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsInfoid");

                    b.Navigation("NewsInfo");
                });

            modelBuilder.Entity("TrainzInfo.Models.RailwayUsersPhoto", b =>
                {
                    b.HasOne("TrainzInfo.Models.Stations", "Stations")
                        .WithMany("railwayUsersPhotos")
                        .HasForeignKey("Stationsid");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("TrainzInfo.Models.Stations", b =>
                {
                    b.HasOne("TrainzInfo.Models.City", "Citys")
                        .WithMany("Stations")
                        .HasForeignKey("Citysid");

                    b.HasOne("TrainzInfo.Models.Metro", "Metro")
                        .WithMany()
                        .HasForeignKey("Metroid");

                    b.HasOne("TrainzInfo.Models.Oblast", "Oblasts")
                        .WithMany("Stations")
                        .HasForeignKey("Oblastsid");

                    b.HasOne("TrainzInfo.Models.StationImages", "StationImages")
                        .WithMany()
                        .HasForeignKey("StationImagesid");

                    b.HasOne("TrainzInfo.Models.StationInfo", "StationInfo")
                        .WithMany()
                        .HasForeignKey("StationInfoid");

                    b.HasOne("TrainzInfo.Models.UkrainsRailways", "UkrainsRailways")
                        .WithMany("Stations")
                        .HasForeignKey("UkrainsRailwaysid");

                    b.Navigation("Citys");

                    b.Navigation("Metro");

                    b.Navigation("Oblasts");

                    b.Navigation("StationImages");

                    b.Navigation("StationInfo");

                    b.Navigation("UkrainsRailways");
                });

            modelBuilder.Entity("TrainzInfo.Models.StationsShadule", b =>
                {
                    b.HasOne("TrainzInfo.Models.Stations", "Stations")
                        .WithMany("StationsShadules")
                        .HasForeignKey("Stationsid");

                    b.HasOne("TrainzInfo.Models.Train", "Train")
                        .WithMany("StationsShadules")
                        .HasForeignKey("Trainid");

                    b.HasOne("TrainzInfo.Models.UkrainsRailways", "UkrainsRailways")
                        .WithMany("stationsShadules")
                        .HasForeignKey("UkrainsRailwaysid");

                    b.Navigation("Stations");

                    b.Navigation("Train");

                    b.Navigation("UkrainsRailways");
                });

            modelBuilder.Entity("TrainzInfo.Models.Train", b =>
                {
                    b.HasOne("TrainzInfo.Models.Stations", "From")
                        .WithMany()
                        .HasForeignKey("Fromid");

                    b.HasOne("TrainzInfo.Models.Stations", "To")
                        .WithMany()
                        .HasForeignKey("Toid");

                    b.HasOne("TrainzInfo.Models.TypeOfPassTrain", "TypeOfPassTrain")
                        .WithMany("Trains")
                        .HasForeignKey("TypeOfPassTrainid");

                    b.Navigation("From");

                    b.Navigation("To");

                    b.Navigation("TypeOfPassTrain");
                });

            modelBuilder.Entity("TrainzInfo.Models.TrainsShadule", b =>
                {
                    b.HasOne("TrainzInfo.Models.Stations", "Stations")
                        .WithMany()
                        .HasForeignKey("Stationsid");

                    b.HasOne("TrainzInfo.Models.Train", "Train")
                        .WithMany("TrainsShadules")
                        .HasForeignKey("Trainid");

                    b.Navigation("Stations");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("TrainzInfo.Models.UserLocomotivePhotos", b =>
                {
                    b.HasOne("TrainzInfo.Models.Locomotive", "Locomotive")
                        .WithMany("UserLocomotivesPhoto")
                        .HasForeignKey("Locomotiveid");

                    b.Navigation("Locomotive");
                });

            modelBuilder.Entity("TrainzInfo.Models.UserTrainzPhoto", b =>
                {
                    b.HasOne("TrainzInfo.Models.Stations", "Stations")
                        .WithMany()
                        .HasForeignKey("Stationsid");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("TrainzInfo.Models.City", b =>
                {
                    b.Navigation("DepotLists");

                    b.Navigation("ElectricTrains");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("TrainzInfo.Models.DepotList", b =>
                {
                    b.Navigation("DieselTrains");

                    b.Navigation("ElectricTrains");

                    b.Navigation("Locomotives");
                });

            modelBuilder.Entity("TrainzInfo.Models.Locomotive", b =>
                {
                    b.Navigation("UserLocomotivesPhoto");
                });

            modelBuilder.Entity("TrainzInfo.Models.Locomotive_series", b =>
                {
                    b.Navigation("Locomotives");
                });

            modelBuilder.Entity("TrainzInfo.Models.Metro", b =>
                {
                    b.Navigation("MetroLines");
                });

            modelBuilder.Entity("TrainzInfo.Models.MetroLines", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("TrainzInfo.Models.NewsInfo", b =>
                {
                    b.Navigation("NewsComments");
                });

            modelBuilder.Entity("TrainzInfo.Models.Oblast", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("TrainzInfo.Models.Stations", b =>
                {
                    b.Navigation("StationsShadules");

                    b.Navigation("railwayUsersPhotos");
                });

            modelBuilder.Entity("TrainzInfo.Models.SuburbanTrainsInfo", b =>
                {
                    b.Navigation("DieselTrains");

                    b.Navigation("ElectricTrain");
                });

            modelBuilder.Entity("TrainzInfo.Models.Train", b =>
                {
                    b.Navigation("StationsShadules");

                    b.Navigation("TrainsShadules");
                });

            modelBuilder.Entity("TrainzInfo.Models.TypeOfPassTrain", b =>
                {
                    b.Navigation("Trains");
                });

            modelBuilder.Entity("TrainzInfo.Models.UkrainsRailways", b =>
                {
                    b.Navigation("DepotLists");

                    b.Navigation("Stations");

                    b.Navigation("stationsShadules");
                });
#pragma warning restore 612, 618
        }
    }
}
